{"ast":null,"code":"var _jsxFileName = \"/Users/lwailoon/Desktop/reactapp/client/src/components/uploadModal.jsx\";\nimport React, { Component } from \"react\";\nimport { Progress } from \"reactstrap\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport config from \"./../config.json\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nclass UploadModal extends Component {\n  constructor() {\n    super(...arguments);\n    this.state = {\n      title: \"\",\n      selectedFile: null,\n      loaded: 0,\n      data: null\n    };\n\n    this.changeTitleHandler = event => {\n      this.setState({\n        title: event.target.value\n      });\n    };\n\n    this.onChangeHandler = event => {\n      var files = event.target.files;\n\n      if (this.maxSelectFile(event, files) && this.checkMimeType(event, files) && this.checkFileSize(event, files)) {\n        this.setState({\n          selectedFile: files\n        });\n      }\n    };\n\n    this.onClickHandler = async () => {\n      await this.validate();\n\n      if (this.state.data !== null) {\n        axios.post(config.Server_URL + \"/upload\", this.state.data, {\n          onUploadProgress: ProgressEvent => {\n            this.setState({\n              loaded: ProgressEvent.loaded / ProgressEvent.total * 100\n            });\n          }\n        }).then(res => {\n          toast.success(\"Upload successful!\"); //console.log(res.statusText);\n\n          setTimeout(function () {\n            this.setState({\n              data: null,\n              title: \"\",\n              selectedFile: null,\n              loaded: 0\n            });\n            this.resetsFileInput();\n            const {\n              onUploaded\n            } = this.props;\n            onUploaded();\n            window.closeModal();\n          }.bind(this), 2000);\n          return true;\n        });\n      }\n    };\n\n    this.validate = () => {\n      // NOTE: Since this is a quick bake, we don't handle complex validation.\n      const data = new FormData();\n\n      if (this.state.title === \"\") {\n        toast.error(\"Please enter a title for the video.\");\n        return false;\n      }\n\n      data.append(\"title\", this.state.title);\n\n      if (this.state.selectedFile === null) {\n        toast.error(\"Please select MP4 video for upload.\");\n        return false;\n      }\n\n      for (var x = 0; x < this.state.selectedFile.length; x++) {\n        data.append(\"file\", this.state.selectedFile[x]);\n      }\n\n      this.setState({\n        data: data\n      }, function () {});\n      return true;\n    };\n\n    this.maxSelectFile = (event, files) => {\n      if (files.length > config.File_upload.numFiles) {\n        const msg = \"Only \" + config.File_upload.numFiles + \" file can be uploaded at a time\";\n        event.target.value = null; // discard selected file\n\n        toast.warn(msg);\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkMimeType = (event, files) => {\n      //define message container\n      let err = \"\"; // list allow mime type\n\n      const types = [\"video/mp4\"]; // loop access array\n\n      for (let x = 0; x < files.length; x++) {\n        // compare file type find doesn\"t matach\n        if (types.every(type => files[x].type !== type)) {\n          // create error message and assign to container   \n          err = \"Unknown file type. Please upload only MP4 format.\\n\";\n          break;\n        }\n      }\n\n      ;\n\n      if (err !== \"\") {\n        event.target.value = null; // discard selected file\n\n        toast.warn(err); //console.log(err);\n\n        return false;\n      }\n\n      return true;\n    };\n\n    this.checkFileSize = (event, files) => {\n      let size = config.File_upload.sizeLimit;\n      let err = \"\";\n\n      for (var x = 0; x < files.length; x++) {\n        //console.log(files[x].size)\n        if (files[x].size > size) {\n          err += files[x].type + \" is too large, please pick a smaller file\\n\";\n        }\n      }\n\n      ;\n\n      if (err !== \"\") {\n        event.target.value = null;\n        toast.warn(err); //console.log(err);\n\n        return false;\n      }\n\n      return true;\n    };\n\n    this.resetsFileInput = event => {\n      let randomString = Math.random().toString(36);\n      this.setState({\n        theInputKey: randomString\n      });\n    };\n  }\n\n  render() {\n    return /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"modal\",\n      id: \"uploadModal\",\n      role: \"dialog\",\n      \"data-testid\": \"uploadModal\",\n      \"aria-labelledby\": \"uploadModalLabel\",\n      \"aria-hidden\": \"true\",\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: \"modal-dialog modal-dialog-centered modal-lg\",\n        role: \"document\",\n        children: /*#__PURE__*/_jsxDEV(\"div\", {\n          className: \"modal-content\",\n          children: [/*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-header\",\n            children: [/*#__PURE__*/_jsxDEV(\"h5\", {\n              className: \"modal-title\",\n              id: \"uploadModalLabel\",\n              children: \"Upload Video\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 155,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"close\",\n              \"data-dismiss\": \"modal\",\n              \"aria-label\": \"Close\",\n              children: /*#__PURE__*/_jsxDEV(\"span\", {\n                \"aria-hidden\": \"true\",\n                children: \"\\xD7\"\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 157,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 156,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 154,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-body\",\n            children: [/*#__PURE__*/_jsxDEV(\"form\", {\n              method: \"post\",\n              action: \"#\",\n              id: \"#\",\n              children: [/*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group mb-2\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"text\",\n                  className: \"form-control\",\n                  id: \"title\",\n                  \"data-testid\": \"title\",\n                  onChange: this.changeTitleHandler,\n                  placeholder: \"Enter a title for this video\"\n                }, void 0, false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 163,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 162,\n                columnNumber: 33\n              }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n                className: \"form-group files\",\n                children: /*#__PURE__*/_jsxDEV(\"input\", {\n                  type: \"file\",\n                  className: \"form-control\",\n                  multiple: true,\n                  onChange: this.onChangeHandler\n                }, this.state.theInputKey || '', false, {\n                  fileName: _jsxFileName,\n                  lineNumber: 168,\n                  columnNumber: 37\n                }, this)\n              }, void 0, false, {\n                fileName: _jsxFileName,\n                lineNumber: 167,\n                columnNumber: 33\n              }, this)]\n            }, void 0, true, {\n              fileName: _jsxFileName,\n              lineNumber: 161,\n              columnNumber: 29\n            }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n              className: \"form-group mt-2\",\n              children: /*#__PURE__*/_jsxDEV(Progress, {\n                max: \"100\",\n                color: \"success\",\n                value: this.state.loaded,\n                children: [Math.round(this.state.loaded, 2), \"%\"]\n              }, void 0, true, {\n                fileName: _jsxFileName,\n                lineNumber: 174,\n                columnNumber: 33\n              }, this)\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 173,\n              columnNumber: 29\n            }, this)]\n          }, void 0, true, {\n            fileName: _jsxFileName,\n            lineNumber: 160,\n            columnNumber: 25\n          }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n            className: \"modal-footer\",\n            children: /*#__PURE__*/_jsxDEV(\"button\", {\n              type: \"button\",\n              className: \"btn btn-success btn-block uploadBtn\",\n              onClick: this.onClickHandler,\n              children: \"Upload\"\n            }, void 0, false, {\n              fileName: _jsxFileName,\n              lineNumber: 179,\n              columnNumber: 29\n            }, this)\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 178,\n            columnNumber: 25\n          }, this)]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 153,\n          columnNumber: 21\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 152,\n        columnNumber: 17\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 150,\n      columnNumber: 13\n    }, this);\n  }\n\n}\n\nexport default UploadModal;","map":{"version":3,"sources":["/Users/lwailoon/Desktop/reactapp/client/src/components/uploadModal.jsx"],"names":["React","Component","Progress","axios","toast","config","UploadModal","state","title","selectedFile","loaded","data","changeTitleHandler","event","setState","target","value","onChangeHandler","files","maxSelectFile","checkMimeType","checkFileSize","onClickHandler","validate","post","Server_URL","onUploadProgress","ProgressEvent","total","then","res","success","setTimeout","resetsFileInput","onUploaded","props","window","closeModal","bind","FormData","error","append","x","length","File_upload","numFiles","msg","warn","err","types","every","type","size","sizeLimit","randomString","Math","random","toString","theInputKey","render","round"],"mappings":"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","sourcesContent":["import React, { Component } from \"react\";\nimport {Progress} from \"reactstrap\";\nimport axios from \"axios\";\nimport { toast } from \"react-toastify\";\nimport config from \"./../config.json\";\n\nclass UploadModal extends Component {\n    state = {\n        title: \"\",\n        selectedFile: null,\n        loaded: 0,\n        data: null\n    }\n\n    changeTitleHandler = (event) => {\n        this.setState({title: event.target.value});\n    }\n\n    onChangeHandler = (event) => {\n        var files = event.target.files;\n        \n        if(this.maxSelectFile(event, files) && this.checkMimeType(event, files) && this.checkFileSize(event, files)) {\n            this.setState({\n                selectedFile: files\n            });\n        }\n    }\n\n    onClickHandler = async () => {\n        await this.validate();\n\n        if(this.state.data !== null) {\n            axios.post(config.Server_URL + \"/upload\", this.state.data, { \n            onUploadProgress: ProgressEvent => {\n                this.setState({\n                    loaded: (ProgressEvent.loaded / ProgressEvent.total*100),\n                });\n            }\n        })\n        .then(res => {\n            toast.success(\"Upload successful!\");\n            //console.log(res.statusText);\n            \n            setTimeout(function() {\n                this.setState({\n                    data: null,\n                    title: \"\",\n                    selectedFile: null,\n                    loaded: 0\n                });\n                this.resetsFileInput();\n                const { onUploaded } = this.props\n                onUploaded();\n                window.closeModal();\n            }\n            .bind(this), 2000);\n            return true;\n        });\n        }\n    };\n\n    validate = () => {\n        // NOTE: Since this is a quick bake, we don't handle complex validation.\n        const data = new FormData();\n\n        if(this.state.title === \"\") {\n            toast.error(\"Please enter a title for the video.\");\n            return false;\n        }\n        \n        data.append(\"title\", this.state.title);\n\n        if(this.state.selectedFile === null) {\n            toast.error(\"Please select MP4 video for upload.\");\n            return false;\n        }\n\n        for(var x = 0; x<this.state.selectedFile.length; x++) {\n            data.append(\"file\", this.state.selectedFile[x]);\n        }\n        this.setState({data: data}, function () { });\n        return true;\n    };\n\n    maxSelectFile = (event, files) => {\n        if (files.length > config.File_upload.numFiles) { \n            const msg = \"Only \" + config.File_upload.numFiles + \" file can be uploaded at a time\";\n            event.target.value = null; // discard selected file\n            toast.warn(msg);\n            return false;\n        }\n        return true;\n    };\n\n    checkMimeType = (event, files) => {\n        //define message container\n        let err = \"\";\n        // list allow mime type\n        const types = [\"video/mp4\"];\n        \n        // loop access array\n        for(let x = 0; x<files.length; x++) {\n            // compare file type find doesn\"t matach\n            if (types.every(type => files[x].type !== type)) {\n                // create error message and assign to container   \n                err = \"Unknown file type. Please upload only MP4 format.\\n\";\n                break;\n            }\n        };\n\n        if (err !== \"\") {\n            event.target.value = null; // discard selected file\n            toast.warn(err);\n            //console.log(err);\n            return false; \n        }\n        return true;\n    };\n\n    checkFileSize = (event, files) => {\n        let size = config.File_upload.sizeLimit;\n        let err = \"\";\n\n        for(var x = 0; x<files.length; x++) {\n            //console.log(files[x].size)\n            if (files[x].size > size) {\n                err += files[x].type + \" is too large, please pick a smaller file\\n\";\n            }\n        };\n        if (err !== \"\") {\n            event.target.value = null;\n            toast.warn(err);\n            //console.log(err);\n            return false;\n        }\n\n        return true;\n    }\n\n    resetsFileInput = (event) => {\n        let randomString = Math.random().toString(36);\n\n        this.setState({\n            theInputKey: randomString\n        });\n    }\n\n    render() {\n        return (\n            <div className=\"modal\" id=\"uploadModal\" role=\"dialog\" data-testid=\"uploadModal\"\n            aria-labelledby=\"uploadModalLabel\" aria-hidden=\"true\">\n                <div className=\"modal-dialog modal-dialog-centered modal-lg\" role=\"document\">\n                    <div className=\"modal-content\">\n                        <div className=\"modal-header\">\n                            <h5 className=\"modal-title\" id=\"uploadModalLabel\">Upload Video</h5>\n                            <button type=\"button\" className=\"close\" data-dismiss=\"modal\" aria-label=\"Close\">\n                                <span aria-hidden=\"true\">&times;</span>\n                            </button>\n                        </div>\n                        <div className=\"modal-body\">\n                            <form method=\"post\" action=\"#\" id=\"#\">\n                                <div className=\"form-group mb-2\">\n                                    <input type=\"text\" className=\"form-control\" id=\"title\" data-testid=\"title\"\n                                    onChange={this.changeTitleHandler}\n                                    placeholder=\"Enter a title for this video\" />\n                                </div>\n                                <div className=\"form-group files\">\n                                    <input type=\"file\" className=\"form-control\" multiple \n                                    key={this.state.theInputKey || '' } \n                                    onChange={this.onChangeHandler} />\n                                </div>\n                            </form>\n                            <div className=\"form-group mt-2\">\n                                <Progress max=\"100\" color=\"success\" \n                                value={this.state.loaded} >{Math.round(this.state.loaded,2) }%</Progress>\n                            </div>\n                        </div>\n                        <div className=\"modal-footer\">\n                            <button type=\"button\" className=\"btn btn-success btn-block uploadBtn\" \n                            onClick={this.onClickHandler}>Upload</button>\n                        </div>\n                    </div>\n                </div>\n            </div>\n        );\n    }\n}\n \nexport default UploadModal;"]},"metadata":{},"sourceType":"module"}